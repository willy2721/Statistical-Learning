}
}
print(opmatrix[11:20,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
#print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
#print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
#print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
#print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
#print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
#print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
#print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
#print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
#print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
#print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
#print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
#print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
#print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
#print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
#print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define a function to calculate t-stats
reg_tvalue = function(y, x) {
y=matrix(y, ncol=1)
xmat=matrix(1, ncol=2, nrow=length(y))
xmat[,2] = x
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
yhead = xmat %*% bhead
e1 = y - yhead
var1 = sum(e1 * e1) / (length(e1)-2)
sigma2 = solve(t(xmat)%*%xmat) * var1
t1=bhead[2]/sqrt(sigma2[2,2])
return(t1)
}
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
# Unlist the vector
agentvec <- unlist(uagentvec)
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
# Filter out the agents that occur less than 5 times
filagent <- soragent[soragent >= 5]
#print(filagent)
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
#alltags[iter] <- summary(lm(y~pred))$coefficient[2, "t value"]
allagents[iter] <- reg_tvalue(y,agentpred)
}
print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
#print(selagents)
selagentlen <- length(selagents)
selagentname <- names(selagents)
#print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
else{
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
}
#print(opmatrix[21:30,])
#  print(allagents)
#print(filagent)
#print(head(uagentvec))
#print(str(uagentvec))
#print(vec)
# Sort the vector by order
#sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
#filtags <- sortags[sortags >= 5]
#sapply()
# Define function to match regex
#list2=regmatches(utagstr, gregexpr(pattern, utagstr))
# Keep only unique words in each row.
#list2=lapply(list2, unique)
#print(test)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
