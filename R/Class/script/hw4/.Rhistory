if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain1)[i])
chistat <- c(chistat, chi)
}
}
}
return_order <- order(chistat, decreasing = TRUE)
chistat[return_order]
colname[return_order]
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
chi <- chisq.test(dstrain[,i],s.product_binary)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
print(head(out1$colname, n=15))
print(head(out1$chistat, n=15))
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
chi <- chisq.test(rbind(dstrain[,i],s.product_binary))$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
out1=filter_chisq(dstrain1)
dstrain1 = hw4ds1[1:2,]
dstrain1
dstrain1 = hw4ds1[1:2,1:2]
dstrain1
out1=filter_chisq(dstrain1)
dstrain1 = hw4ds1[1:2,1:3]
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
dstrain1 = hw4ds1[1:2,1:2]
out1=filter_chisq(dstrain1)
dstrain1
dstrain1[1,1]
s.product <- dstrain[,1,drop = FALSE]
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
s.product <- dstrain[,1]
s.product <- dstrain1[,1]
s.product_binary <- as.numeric(s.product == ypos)
s.product_binary
dstrain1 = hw4ds1[-folds[[testfold]],]
s.product <- dstrain1[,1]
s.product_binary <- as.numeric(s.product == ypos)
dstrain1[,-1][dstrain1[,-1] > 0] <- 1
table(dstrain1[,1], dstrain1[,2])
cont <- table(dstrain1[,1], dstrain1[,2])
chisq.test(cont)$statistic
cont <- table(dstrain1[,1], dstrain1[,2])
cont
dstrain1 = hw4ds1[1:2,1:2]
dstrain1[,-1][dstrain1[,-1] > 0] <- 1
cont <- table(dstrain1[,1], dstrain1[,2])
cont
chisq.test(cont)$statistic
dstrain1 = hw4ds1[1,1]
dstrain1[,-1][dstrain1[,-1] > 0] <- 1
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
chi <- chisq.test(dstrain[,i],s.product)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
contingency <- table(dstrain[,2],s.product)
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
contingency <- table(dstrain1[,2],s.product)
contingency
chi <- chisq.test(contingency)$statistic
chi
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain1[,i,drop = FALSE],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
print(chi)
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
print(chi)
chistat
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain1[,i,drop = FALSE],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, unname(chi))
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i,drop = FALSE],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, unname(chi))
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, unname(chi))
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, unname(chi))
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
rm(list=ls())
```{r}
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw4/hw4ds1.rdata")
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, unname(chi))
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
### Q1 ###
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
break;
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = chistat[return_order]))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain1[,i,drop = FALSE],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(dstrain[,i,drop = FALSE],s.product)
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
out1=filter_chisq(dstrain1)
contingency
contingency <- table(dstrain1[,i,drop = FALSE],s.product)
contingency <- table(dstrain1[,4111,drop = FALSE],s.product)
s.product <- dstrain1[,1,drop = FALSE]
contingency <- table(dstrain1[,4111,drop = FALSE],s.product)
dstrain1[,4111,drop = FALSE]
str(dstrain1[,4111,drop = FALSE])
unlist(dstrain1[,4111,drop = FALSE])
s.product
filter_chisq <- function(dstrain, ypos = "pos", min_count = 5, chi_threshold = 10^(-5)){
# Store the first column and convert to binary
s.product <- dstrain[,1,drop = FALSE]
#s.product_binary <- as.numeric(s.product == ypos)
# Set all values larger than 0 to 1 for every column after the second one
dstrain[,-1][dstrain[,-1] > 0] <- 1
# Store the number of occurences for each feature
feat_freq <- colSums(dstrain[,-1])
# Create empty vectors to store column positions
colpos <- c()
colname <- c()
chistat <- c()
for(i in 2:ncol(dstrain)){
if(feat_freq[i - 1] > min_count){
contingency <- table(unlist(dstrain[,i,drop = FALSE]),unlist(s.product))
chi <- chisq.test(contingency)$statistic
# Save results if information gain is less than threshold
if(chi > chi_threshold){
colpos <- c(colpos,i)
colname <- c(colname, names(dstrain)[i])
chistat <- c(chistat, chi)
}
}
}
if(length(colpos) == 0){
return(list(colpos = NULL, colname = NULL, chistat = NULL))
}
return_order <- order(chistat, decreasing = TRUE)
return(list(colpos = colpos[return_order], colname = colname[return_order], chistat = unname(chistat[return_order])))
}
testfold = 1
dstrain1 = hw4ds1[-folds[[testfold]],]
out1=filter_chisq(dstrain1)
print(head(out1$colpos, n=15))
