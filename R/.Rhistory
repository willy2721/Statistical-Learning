colnames(ret) <- "constant"
return(ret)
}
#print(sort_user_tags)
nfeat = length(sort_user_tags)
t_value_per_tag = rep(NA, nfeat)
for (i in 1:nfeat){
feat <- names(sort_user_tags)[i]
x <- as.numeric(grepl(feat, user_tags))
result <- summary(lm(y ~ x))
t_value_per_tag[i] = coef(result)["x", "t value"]
if(feat == "cn"){
print(x)
}
}
names(t_value_per_tag) <- c(names(sort_user_tags))
#print(t_value_per_tag)
# t_value_per_tag <- t_value_per_tag[abs(t_value_per_tag) > 1]
t_value_per_tag <- t_value_per_tag[order(abs(t_value_per_tag), decreasing = TRUE)]
#print(t_value_per_tag)
ret <- matrix(NA, nrow = length(user_tags), ncol = length(t_value_per_tag) + 1)
colnames(ret) <- c("constant", paste("agent", names(t_value_per_tag), sep = "_"))
ret[,1] <- 1
for (i in 1:length(t_value_per_tag)){
feat <- names(t_value_per_tag)[i]
ret[,i+1] <- as.numeric(grepl(feat, user_tags))
}
return(ret)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat=20
rtb3 = rtb2_train[1:(nfeat+1)]
y=as.matrix(rtb3[,1])
xmat = model.matrix(paying_price~., data=rtb3)
#lambda <- 0.001 *
#}
head(y)
head(xmat)
xmat
nrow(xmat)
xmatsqr <- t(xmat) %*% xmat
str(xmatsqr)
str(xmat)
rm(list=ls())
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat=20
rtb3 <- rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
str(xmat)
xmat
lambda <- 0.001 * nrow(xmat)
lambda
I <- diag(dim(xmatsqr))
xmatsqr <- t(xmat) %*% xmat
I <- diag(dim(xmatsqr))
I
I
I <- diag(3)
I
str(xmatsqr)
length(xmatsqr)
nrow(xmatsqr)
I <- diag(nrow(xmatsqr))
I
lambda * I
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
w
rm(list=ls())
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 <- rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- N / (t(e_zero) %*% e_zero))
beta_init <- N / (t(e_zero) %*% e_zero)
alpha_init <- lambda * beta_init
beta_init
str(t(xmat))
A <- alpha_init * I + beta_init %*% xmatsqr
alpha_init
beta_init
str(alpha_init)
beta_init <- as.numeric(beta_init)
beta_init
alpha_init <- as.numeric(lambda * beta_init)
alpha_init
str(alpha_init)
A <- alpha_init * I + beta_init %*% xmatsqr
A <- alpha_init * I + beta_init * xmatsqr
A
m_N <- beta_init * solve(A) * t(xmat) * y
m_N <- beta_init * solve(A) %*% t(xmat) %*% y
m_N
lambda
A
tmp <- eigen(beta_init * xmatsqr, only.values = TRUE)
tmp
A
nrow(A)
eigenvalues <- eigen(beta_init * xmatsqr, only.values = TRUE)
eigenvalues
lambda <- sum(lapply(eigenvalues,function(x) x / (alpha_init + x)))
lambda <- sum(lapply(eigenvalues,function(x) (x / (alpha_init + x))))
lambda <- sum(lapply(eigenvalues,function(x) x / (alpha_init + x)))
lapply(eigenvalues,function(x) x / (alpha_init + x))
sum(lapply(eigenvalues,function(x) x / (alpha_init + x)))
lapply(eigenvalues,function(x) x / (alpha_init + x))
str(lapply(eigenvalues,function(x) x / (alpha_init + x)))
lapply(eigenvalues,function(x) x / (alpha_init + x))
lapply(eigenvalues,function(x) x / (alpha_init + x))[0]
lapply(eigenvalues,function(x) x / (alpha_init + x))[1]
sum(lapply(eigenvalues,function(x) x / (alpha_init + x))[1])
sum(unlist(lapply(eigenvalues,function(x) x / (alpha_init + x))[1]))
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_init + x))[1]))
gamma
alpha_new <- gamma / (t(m_N) %*% m_N)
alpha_new
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
alpha_new
alpha_init
m_N
e_one <- y - xmat %*% m_N
beta_new <- 1 / ((t(e_one) %*% e_one) / (N - gamma))
beta_new
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
beta_new
alpha_old <- alpha_init
beta_old <- beta_init
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 <- rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
#thresh <-
#eigenvalues
#lambda
#}
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
thresh
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 <- rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
#eigenvalues
#lambda
#}
m_N
alpha_new
alpha_old
beta_new
alpha_new
m_N
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- seq(1, length(rtb2_train), by = 50)
rtb3 = rtb2_train[1:10000,nfeat]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
m_N
alpha_new
beta_new
#eigenvalues
#lambda
#}
alpha_new
alpha_old
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 = rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
m_N
alpha_new
beta_new
#eigenvalues
#lambda
#}
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
beta_test <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
beta_test
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 = rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
m_N <- beta_old * solve(A) %*% t(xmat) %*% y
beta_test <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(m_N) %*% m_N))
e_one <- y - xmat %*% m_N
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
beta_test
#m_N
#alpha_new
#beta_new
#eigenvalues
#lambda
#}
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 = rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
mN <- beta_old * solve(A) %*% t(xmat) %*% y
alpha <- alpha_old
beta <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(mN) %*% mN))
e_one <- y - xmat %*% mN
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
mN
alpha
beta
#beta_test
#m_N
#alpha_new
#beta_new
#eigenvalues
#lambda
#}
A_inv <- solve(A)
A_inv
print(diag(A_inv))
print(sqrt(diag(A_inv)))
rm(list=ls())
### Q1 ###
#lm_evmax <- function(y,xmat){
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat <- 20
rtb3 = rtb2_train[1:(nfeat+1)]
y <- as.matrix(rtb3[,1])
xmat <- model.matrix(paying_price~., data=rtb3)
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
mN <- beta_old * solve(A) %*% t(xmat) %*% y
alpha <- alpha_old
beta <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(mN) %*% mN))
e_one <- y - xmat %*% mN
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
mNsd <- sqrt(diag(solve(A)))
ret <- list(mN=mN,mNsd=mNsd,alpha=alpha,beta=beta)
ret
#beta_test
#m_N
#alpha_new
#beta_new
#eigenvalues
#lambda
#}
### Q1 ###
lm_evmax <- function(y,xmat){
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
mN <- beta_old * solve(A) %*% t(xmat) %*% y
alpha <- alpha_old
beta <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(mN) %*% mN))
e_one <- y - xmat %*% mN
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
mNsd <- sqrt(diag(solve(A)))
ret <- list(mN=mN,mNsd=mNsd,alpha=alpha,beta=beta)
return(ret)
}
nfeat=seq(1, length(rtb2_train), by = 50)
rm(list=ls())
### Q1 ###
lm_evmax <- function(y,xmat){
N <- nrow(xmat)
lambda <- 0.001 * N
xmatsqr <- t(xmat) %*% xmat
I <- diag(nrow(xmatsqr))
w <- (lambda * I + xmatsqr) %*% t(xmat) %*% y
e_zero <- y - xmat %*% w
beta_init <- as.numeric(N / (t(e_zero) %*% e_zero))
alpha_init <- as.numeric(lambda * beta_init)
alpha_old <- alpha_init
beta_old <- beta_init
# Set initial dummy value for thresh
thresh <- 1
while(thresh >= 10^(-5)){
A <- alpha_old * I + beta_old * xmatsqr
mN <- beta_old * solve(A) %*% t(xmat) %*% y
alpha <- alpha_old
beta <- beta_old
eigenvalues <- eigen(beta_old * xmatsqr, only.values = TRUE)
gamma <- sum(unlist(lapply(eigenvalues,function(x) x / (alpha_old + x))[1]))
alpha_new <- as.numeric(gamma / (t(mN) %*% mN))
e_one <- y - xmat %*% mN
beta_new <- as.numeric(1 / ((t(e_one) %*% e_one) / (N - gamma)))
thresh <- abs(alpha_old - alpha_new) + abs(beta_old - beta_new)
alpha_old <- alpha_new
beta_old <- beta_new
}
mNsd <- sqrt(diag(solve(A)))
ret <- list(mN=mN,mNsd=mNsd,alpha=alpha,beta=beta)
return(ret)
}
### TESTING ###
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw2/rtb2_train.rdata")
nfeat=seq(1, length(rtb2_train), by = 50)
rtb3 = rtb2_train[1:10000,nfeat]
y=as.matrix(rtb3[,1])
xmat = model.matrix(paying_price~., data=rtb3)
lmev1 = lm_evmax(y, xmat)
lvem1
lmev1
