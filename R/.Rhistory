head(tar)
head(filname)
head(utagvec)
apply(utagvec, 1, featexist,feat1,utagvec)
feat <- filname[1]
test <- apply(utagvec, 1, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
test <- apply(utagvec, 1, function(taglist) as.numeric(is.element(feat, taglist)))
utagvec[1]
test <- apply(utagvec, 1, function(taglist) as.numeric(is.element(feat, as.data.frame(unlist(taglist)))))
feat <- filname[1]
test <- apply(utagvec, 1, function(taglist) as.numeric(is.element(feat, as.data.frame(unlist(taglist)))))
feat <- filname[1]
test <- apply(utagvec, 1, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
test <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
test
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
if(iter == 1){
print(pred)
}
#print(pred)
#t.test(tar,pred)
#alltags[iter] <-
}
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
if(iter == 1){
t.test(tar,pred)
}
#alltags[iter] <-
}
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
#head(alltags)
# Select the column containing the target values
tar <- rtb1_train$paying_price
#head(tar)
#head(filname)
head(utagvec)
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
if(iter == 1){
print(str(tar))
print(str(pred))
#t.test(tar,pred)
}
#alltags[iter] <-
}
rm(list=ls())
library(dplyr)
library(ggplot2)
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
getwd()
load(./Class/data/rtb1_train.rdata)
load(~/Class/data/rtb1_train.rdata)
load(~Class/data/rtb1_train.rdata)
load(/Class/data/rtb1_train.rdata)
load(./Class/data/rtb1_train.rdata)
load("./Class/data/rtb1_train.rdata"")
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
load("./Class/data/rtb1_train.rdata")
load('~/Class/data/rtb1_train.rData')
load('./Class/data/rtb1_train.rData')
load("rtb1_train.rdata")
load(rtb1_train.rdata)
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.csv")
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
utagvec <- strsplit(rtb1_train$user_tags, ",")
vec<-unlist(utagvec)
sortags <- sort(table(vec), decreasing=TRUE)
filtags <- sortags[sortags >= 5]
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
tar <- rtb1_train$paying_price
head(utagvec)
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
if(iter == 1){
print(str(tar))
print(str(pred))
#t.test(tar,pred)
}
#alltags[iter] <-
}
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
if(iter == 1){
print(str(tar))
print(str(pred))
t.test(tar,pred)
}
#alltags[iter] <-
}
summary(t.test(tar,pred))
print(t.test(tar,pred))
str(t.test(tar,pred))
print(t.test(tar,pred)$statistic)
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
#head(alltags)
# Select the column containing the target values
tar <- rtb1_train$paying_price
#head(tar)
#head(filname)
#head(utagvec)
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred = sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
print(alltags[iter])
# TEST
#head(utagvec)
#feat1 <- filname[1]
#featexist <- function(featname,taglist){
#  return(as.numeric(is.element(featname, unlist(taglist))))
#}
#feat <- filname[iter]
#feat <- filname[1]
#test <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
#test
#featexist(feat1,utagvec[1])
#featexist <- is.element(feat1, unlist(utagvec[1]))
#featexist
#feat <- filname[1]
#str(feat)
#str(unlist(utagvec[1]))
#x = as.numeric(feat %in% unlist(utagvec[1]))
#x = as.numeric(is.element(feat, unlist(utagvec[1])))
#x
#t.test(tar~x)
#str(utagvec[1])
#a#lltags
gen_utagmat <- function(utagvec,y){
}
print(alltags)
t.test(tar, pred)
filtags
print(alltags)
print(pred)
str(pred)
pred <- data_frame(pred)
pred
pred <- data.frame(pred)
pred
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
# Select the column containing the target values
tar <- rtb1_train$paying_price
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Combine the
opmatrix <- cbind(opmatrix,data.frame(pred))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Combine the columns in to one dataframe
if(iter == 1){
opmatrix <- data.frame(pred)
}
opmatrix <- cbind(opmatrix,data.frame(pred))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
head(opmatrix)
head(alltags)
alltags[1]
str(alltags)
seltags <- seltags[abs(seltags) >= 1]
seltags <- alltags[abs(alltags) >= 1]
seltags
sort(seltags, decreasing = FALSE)
seltags <- sort(seltags, decreasing = FALSE)
seltags
seltags <- sort(seltags, decreasing = TRUE)
seltags
head(seltags)
names(seltags)
head(opmatrix)
colnames(opmatrix) <- filname
head()opmatrix
head(opmatrix)
selname <- names(seltags)
selname
seltags
rm(list=ls())
library(dplyr)
library(ggplot2)
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
# Select the column containing the target values
tar <- rtb1_train$paying_price
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
seltags <- alltags[abs(alltags) >= 1]
seltags <- sort(seltags, decreasing = TRUE)
sellen <- length(seltags)
selname <- names(seltags)
# Create output matrix
for(seliter in 1:sellen){
# Get feature name
selfeat <- selname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(utagvec, function(taglist) as.numeric(is.element(selfeat, unlist(taglist))))
# Combine the columns in to one dataframe
if(iter == 1){
opmatrix <- data.frame(selpred)
}
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
for(seliter in 1:sellen){
# Get feature name
selfeat <- selname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(utagvec, function(taglist) as.numeric(is.element(selfeat, unlist(taglist))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
colnames(opmatrix) <- selname
head(opmatrix)
opmatrix <- as.matrix(opmatrix)
opmatrix
cbind(constant<-1,opmatrix)
opmatrix <- as.matrix(opmatrix)
opmatrix
View(opmatrix)
opmatrix <- data.frame(selpred)
rm(list=ls())
library(dplyr)
library(ggplot2)
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
# Select the column containing the target values
tar <- rtb1_train$paying_price
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
seltags <- alltags[abs(alltags) >= 1]
seltags <- sort(seltags, decreasing = TRUE)
sellen <- length(seltags)
selname <- names(seltags)
# Create output matrix
for(seliter in 1:sellen){
# Get feature name
selfeat <- selname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(utagvec, function(taglist) as.numeric(is.element(selfeat, unlist(taglist))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
# Name the output matrix
colnames(opmatrix) <- selname
opmatrix <- as.matrix(cbind(constant<-1,opmatrix))
opmatrix
#head(seltags)
#names(seltags)
#head(opmatrix)
#seltags
#head(alltags)
#alltags[1]
#head(opmatrix)
#print(alltags)
#print(pred)
#pred <- data.frame(pred)
#pred
#str(pred)
#t.test(tar, pred)
gen_utagmat <- function(utagvec,y){
}
opmatrix <- as.matrix(cbind(constant,opmatrix))
opmatrix
opmatrix <- opmatrix[,-2]
opmatrix
rm(list=ls())
library(dplyr)
library(ggplot2)
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
# Select the column containing the target values
tar <- rtb1_train$paying_price
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
seltags <- alltags[abs(alltags) >= 1]
seltags <- sort(seltags, decreasing = TRUE)
sellen <- length(seltags)
selname <- names(seltags)
# Create output matrix
for(seliter in 1:sellen){
# Get feature name
selfeat <- selname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(utagvec, function(taglist) as.numeric(is.element(selfeat, unlist(taglist))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
# Name the output matrix
colnames(opmatrix) <- paste("user",selname, sep = "_")
opmatrix <- as.matrix(cbind(constant,opmatrix))
opmatrix <- as.matrix(cbind(constant=1,opmatrix))
opmatrix
rm(list=ls())
# Load data
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/rtb1_train.rdata")
rtb1_train <- rtb1_train[1:300,]
### Creating tags ###
# Create a tag vector containing the user_tags column split by commas
utagvec <- strsplit(rtb1_train$user_tags, ",")
# Unlist the tag vector
vec<-unlist(utagvec)
# Sort the tag vector by order
sortags <- sort(table(vec), decreasing=TRUE)
# Filter out the tags that occur less than 5 times
filtags <- sortags[sortags >= 5]
### Computing t-value for each tag ###
# Create a named vector with the same length as the tag vector and set all values to NA
fillen <- length(filtags)
filname <- names(filtags)
alltags <- structure(rep(NA, fillen), names=filname)
# Select the column containing the target values
tar <- rtb1_train$paying_price
# Compute and store the t-stats for each tag
for(iter in 1:fillen){
# Get feature name
feat <- filname[iter]
# Store the numerical value of whether the feature exists in the tag vector
pred <- sapply(utagvec, function(taglist) as.numeric(is.element(feat, unlist(taglist))))
# Store the t-statistic for each tag in "alltags"
alltags[iter] <- t.test(tar, pred)$statistic
}
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
seltags <- alltags[abs(alltags) >= 1]
seltags <- sort(seltags, decreasing = TRUE)
sellen <- length(seltags)
selname <- names(seltags)
# Create output matrix
for(seliter in 1:sellen){
# Get feature name
selfeat <- selname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selpred <- sapply(utagvec, function(taglist) as.numeric(is.element(selfeat, unlist(taglist))))
# Combine the columns in to one dataframe
if(seliter == 1){
opmatrix <- data.frame(selpred)
}
opmatrix <- cbind(opmatrix,data.frame(selpred))
}
# Name the output matrix
colnames(opmatrix) <- paste("user",selname, sep = "_")
opmatrix <- as.matrix(cbind(constant=1,opmatrix))
opmatrix
#head(seltags)
#names(seltags)
#head(opmatrix)
#seltags
#head(alltags)
#alltags[1]
#head(opmatrix)
#print(alltags)
#print(pred)
#pred <- data.frame(pred)
#pred
#str(pred)
#t.test(tar, pred)
gen_utagmat <- function(utagvec,y){
}
