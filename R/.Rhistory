plot(cars)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
diamonds
str(diamonds)
#ggplot(diamonds)
#ggplot(diamonds, aes(x = carat))
#ggplot(diamonds, aes(x = carat, y = price))
#ggplot(diamonds, aes(x = carat, color = cut))
# Plot diamonds with carat as x, price as y, and different colors according to different cut, then add the two layers geom_point() and geom_smooth()
#ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + geom_smooth()
# Plot diamonds with carat as x, price as y, and one single smooth line.
#ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(color = cut)) + geom_smooth()
# Plot diamonds with carat as x, price as y, and different shapes according to different cut, different colors according to different color
#ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(color = color, shape = cut)) + geom_smooth()
# Add axis labels and plot title
gg <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + labs(title="Scatterplot", x="Carat", y="Price")
#print(gg)
# Modifying label size and legend title
ggplus <- gg + theme(plot.title = element_text(size=20,face="bold"), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), axis.title.x=element_text(size=15), axis.title.y=element_text(size=15)) + scale_color_discrete(name="Cut of diamonds")
print(ggplus)
# Columns defined by cut
#ggmultiple <- ggplus + facet_wrap(~cut, ncol=3)
#print(ggmultiple)
ggmultiple <- ggplus + facet_wrap(color ~ cut) + theme(plot.title = element_text(size=10,face="bold"), axis.text.x=element_text(size=5), axis.text.y=element_text(size=5), axis.title.x=element_text(size=7.5), axis.title.y=element_text(size=7.5))
print(ggmultiple)
getwd()
setwd("C:\\Users\\Willy\\OneDrive\\公用\\台大\\Senior courses\\Second semester\\Statistical Learning\\R")
getwd()
rm(list=ls())
library(dplyr)
df1_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_train.csv")
df1_test1 <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_test1.csv")
df1_test1y <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_test1y.csv")
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(missing(df_test)||ncol(df_test) != b_len){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,], df1_test1)
#str(out1)
#print(out1$mua)
#mae1a <- mean(abs(df1_test1y[,1] - out1[[5]]))
#as.vector(df1_test1y)
#print(mae1a)
#out1
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(missing(df_test)||(ncol(df_test) != b_len)){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,], )
rm(list=ls())
library(dplyr)
df1_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_train.csv")
df1_test1 <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_test1.csv")
df1_test1y <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/data/df1_test1y.csv")
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(missing(df_test)||(ncol(df_test) != b_len)){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,], )
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,])
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(missing(df_test)||(ncol(df_test) != b_len)){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,])
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(is.null(df_test)||(ncol(df_test) != b_len)){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,])
gpredict <- function(df_train, df_test){
xa <- df_train[,1]
mean_a <- mean(xa)
xb <- df_train[,-1,drop = FALSE]
mean_b <- colMeans(xb, na.rm = FALSE)
cov_max <- cov(df_train)
total_len <- ncol(df_train)
a_len <- 1
b_len <- ncol(df_train) - a_len
print(ncol(df_test))
print(b_len)
cov_ab <- cov_max[1:a_len, (a_len+1):total_len]
cov_bb <- cov_max[(a_len+1):total_len,(a_len+1):total_len]
if(missing(df_test)||(ncol(df_test) != b_len)){
pred <- NULL
} else{
pred <- apply(df_test, 1, function(df_test) mean_a + cov_ab %*% solve(cov_bb)
%*% as.vector(unlist((df_test-mean_b), use.names = FALSE)))
}
ret <- list(mua=mean_a, mub=mean_b, s_ab=cov_ab, s_bb=cov_bb, predict=pred)
return(ret)
}
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,])
#options(scipen=10)
out1 <- gpredict(df1_train[1:200,],)
install.packages("ISLR")
library(ISLR)
str(Auto)
str(Khan)
str(Smarket)
