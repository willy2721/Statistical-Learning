# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
###print(head(uagentvec))
# Unlist the vector
agentvec <- unlist(uagentvec)
###print(head(agentvec))
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
###print(soragent)
# Select the agents that occur more than 10 times and less than or equal to floor(0.5N) times
filagent <- soragent[soragent >= 10]
filagent <- filagent[filagent <= floor(0.5 * length(uagentvec))]
###print(filagent)
# Return a column containing 1's if no tags occus less than 5 times
if(length(filagent) == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
if(i == 1){
print(agentpred)
}
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
allagents[iter] <- summary(lm(y~agentpred))$coefficient[length(summary(lm(y~agentpred))$coefficient[, "t value"]), "t value"]
}
# Try sorting by reverse alphabetical order before filtering
order <- sort(names(allagents), decreasing = TRUE)
allagents <- allagents[order]
###print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
selagentlen <- length(selagents)
###print(selagents)
# Return a column containing 1's if no agents have an absolute t value larger or equal to 1
if(selagentlen == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
# Try reordering members with the same t-value
#for(iter in 1:(selagentlen-1)){
#  if(selagents[iter] == selagents[iter + 1]){
#    tmp <- names(selagents)[iter]
#    names(selagents)[iter] <- names(selagents)[iter + 1]
#    names(selagents)[iter + 1] <- tmp
#    iter <- iter-1
#  }
#}
###print(selagents)
selagentname <- names(selagents)
###print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selagentpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
agentmatrix <- data.frame(selagentpred)
}
else{
agentmatrix <- cbind(agentmatrix,data.frame(selagentpred))
}
}
# Name the output matrix
colnames(agentmatrix) <- paste("agent",selagentname, sep = "_")
agentmatrix <- as.matrix(cbind(constant=1,agentmatrix))
return(agentmatrix)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
###print(head(uagentvec))
# Unlist the vector
agentvec <- unlist(uagentvec)
###print(head(agentvec))
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
###print(soragent)
# Select the agents that occur more than 10 times and less than or equal to floor(0.5N) times
filagent <- soragent[soragent >= 10]
filagent <- filagent[filagent <= floor(0.5 * length(uagentvec))]
###print(filagent)
# Return a column containing 1's if no tags occus less than 5 times
if(length(filagent) == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
if(iter == 1){
print(agentpred)
}
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
allagents[iter] <- summary(lm(y~agentpred))$coefficient[length(summary(lm(y~agentpred))$coefficient[, "t value"]), "t value"]
}
# Try sorting by reverse alphabetical order before filtering
order <- sort(names(allagents), decreasing = TRUE)
allagents <- allagents[order]
###print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
selagentlen <- length(selagents)
###print(selagents)
# Return a column containing 1's if no agents have an absolute t value larger or equal to 1
if(selagentlen == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
# Try reordering members with the same t-value
#for(iter in 1:(selagentlen-1)){
#  if(selagents[iter] == selagents[iter + 1]){
#    tmp <- names(selagents)[iter]
#    names(selagents)[iter] <- names(selagents)[iter + 1]
#    names(selagents)[iter + 1] <- tmp
#    iter <- iter-1
#  }
#}
###print(selagents)
selagentname <- names(selagents)
###print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selagentpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
agentmatrix <- data.frame(selagentpred)
}
else{
agentmatrix <- cbind(agentmatrix,data.frame(selagentpred))
}
}
# Name the output matrix
colnames(agentmatrix) <- paste("agent",selagentname, sep = "_")
agentmatrix <- as.matrix(cbind(constant=1,agentmatrix))
return(agentmatrix)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
gen_uagentmat <- function(uagentvec, y){
# uagentvec contains column of user agents
# y contains column of paying_price
up_bound = length(uagentvec) * 0.5
utagstr <- uagentvec
pattern <- "([A-Za-z][A-Za-z0-9]{1, })"
user_tags <- regmatches(utagstr, gregexpr(pattern, utagstr))
user_tags <- lapply(user_tags, unique)
flat_user_tags <- unlist(user_tags, recursive = TRUE)
sort_user_tags <- sort(table(flat_user_tags), decreasing = TRUE)
sort_user_tags <- sort_user_tags[sort_user_tags >= 10]
sort_user_tags <- sort_user_tags[sort_user_tags <= up_bound]
if (length(sort_user_tags) == 0){
ret <- matrix(1, nrow = length(user_tags), ncol = 1)
colnames(ret) <- "constant"
return(ret)
}
#print(sort_user_tags)
nfeat = length(sort_user_tags)
t_value_per_tag = rep(NA, nfeat)
for (i in 1:nfeat){
feat <- names(sort_user_tags)[i]
x <- as.numeric(grepl(feat, user_tags))
result <- summary(lm(y ~ x))
t_value_per_tag[i] = coef(result)["x", "t value"]
if(i == 1){
print(x)
}
}
names(t_value_per_tag) <- c(names(sort_user_tags))
print(t_value_per_tag)
# t_value_per_tag <- t_value_per_tag[abs(t_value_per_tag) > 1]
t_value_per_tag <- t_value_per_tag[order(abs(t_value_per_tag), decreasing = TRUE)]
#print(t_value_per_tag)
ret <- matrix(NA, nrow = length(user_tags), ncol = length(t_value_per_tag) + 1)
colnames(ret) <- c("constant", paste("agent", names(t_value_per_tag), sep = "_"))
ret[,1] <- 1
for (i in 1:length(t_value_per_tag)){
feat <- names(t_value_per_tag)[i]
ret[,i+1] <- as.numeric(grepl(feat, user_tags))
}
return(ret)
}
gen_uagentmat <- function(uagentvec, y){
# uagentvec contains column of user agents
# y contains column of paying_price
up_bound = length(uagentvec) * 0.5
utagstr <- uagentvec
pattern <- "([A-Za-z][A-Za-z0-9]{1, })"
user_tags <- regmatches(utagstr, gregexpr(pattern, utagstr))
user_tags <- lapply(user_tags, unique)
flat_user_tags <- unlist(user_tags, recursive = TRUE)
sort_user_tags <- sort(table(flat_user_tags), decreasing = TRUE)
sort_user_tags <- sort_user_tags[sort_user_tags >= 10]
sort_user_tags <- sort_user_tags[sort_user_tags <= up_bound]
if (length(sort_user_tags) == 0){
ret <- matrix(1, nrow = length(user_tags), ncol = 1)
colnames(ret) <- "constant"
return(ret)
}
#print(sort_user_tags)
nfeat = length(sort_user_tags)
t_value_per_tag = rep(NA, nfeat)
for (i in 1:nfeat){
feat <- names(sort_user_tags)[i]
x <- as.numeric(grepl(feat, user_tags))
result <- summary(lm(y ~ x))
t_value_per_tag[i] = coef(result)["x", "t value"]
if(i == 1){
print(x)
}
}
names(t_value_per_tag) <- c(names(sort_user_tags))
#print(t_value_per_tag)
# t_value_per_tag <- t_value_per_tag[abs(t_value_per_tag) > 1]
t_value_per_tag <- t_value_per_tag[order(abs(t_value_per_tag), decreasing = TRUE)]
#print(t_value_per_tag)
ret <- matrix(NA, nrow = length(user_tags), ncol = length(t_value_per_tag) + 1)
colnames(ret) <- c("constant", paste("agent", names(t_value_per_tag), sep = "_"))
ret[,1] <- 1
for (i in 1:length(t_value_per_tag)){
feat <- names(t_value_per_tag)[i]
ret[,i+1] <- as.numeric(grepl(feat, user_tags))
}
return(ret)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
gen_uagentmat <- function(uagentvec, y){
# uagentvec contains column of user agents
# y contains column of paying_price
up_bound = length(uagentvec) * 0.5
utagstr <- uagentvec
pattern <- "([A-Za-z][A-Za-z0-9]{1, })"
user_tags <- regmatches(utagstr, gregexpr(pattern, utagstr))
user_tags <- lapply(user_tags, unique)
flat_user_tags <- unlist(user_tags, recursive = TRUE)
sort_user_tags <- sort(table(flat_user_tags), decreasing = TRUE)
sort_user_tags <- sort_user_tags[sort_user_tags >= 10]
sort_user_tags <- sort_user_tags[sort_user_tags <= up_bound]
if (length(sort_user_tags) == 0){
ret <- matrix(1, nrow = length(user_tags), ncol = 1)
colnames(ret) <- "constant"
return(ret)
}
#print(sort_user_tags)
nfeat = length(sort_user_tags)
t_value_per_tag = rep(NA, nfeat)
for (i in 1:nfeat){
feat <- names(sort_user_tags)[i]
x <- as.numeric(grepl(feat, user_tags))
result <- summary(lm(y ~ x))
t_value_per_tag[i] = coef(result)["x", "t value"]
if(i == 2){
print(x)
}
}
names(t_value_per_tag) <- c(names(sort_user_tags))
#print(t_value_per_tag)
# t_value_per_tag <- t_value_per_tag[abs(t_value_per_tag) > 1]
t_value_per_tag <- t_value_per_tag[order(abs(t_value_per_tag), decreasing = TRUE)]
#print(t_value_per_tag)
ret <- matrix(NA, nrow = length(user_tags), ncol = length(t_value_per_tag) + 1)
colnames(ret) <- c("constant", paste("agent", names(t_value_per_tag), sep = "_"))
ret[,1] <- 1
for (i in 1:length(t_value_per_tag)){
feat <- names(t_value_per_tag)[i]
ret[,i+1] <- as.numeric(grepl(feat, user_tags))
}
return(ret)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
###print(head(uagentvec))
# Unlist the vector
agentvec <- unlist(uagentvec)
###print(head(agentvec))
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
###print(soragent)
# Select the agents that occur more than 10 times and less than or equal to floor(0.5N) times
filagent <- soragent[soragent >= 10]
filagent <- filagent[filagent <= floor(0.5 * length(uagentvec))]
###print(filagent)
# Return a column containing 1's if no tags occus less than 5 times
if(length(filagent) == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
if(iter == 2){
print(agentpred)
}
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
allagents[iter] <- summary(lm(y~agentpred))$coefficient[length(summary(lm(y~agentpred))$coefficient[, "t value"]), "t value"]
}
# Try sorting by reverse alphabetical order before filtering
order <- sort(names(allagents), decreasing = TRUE)
allagents <- allagents[order]
###print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
selagentlen <- length(selagents)
###print(selagents)
# Return a column containing 1's if no agents have an absolute t value larger or equal to 1
if(selagentlen == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
# Try reordering members with the same t-value
#for(iter in 1:(selagentlen-1)){
#  if(selagents[iter] == selagents[iter + 1]){
#    tmp <- names(selagents)[iter]
#    names(selagents)[iter] <- names(selagents)[iter + 1]
#    names(selagents)[iter + 1] <- tmp
#    iter <- iter-1
#  }
#}
###print(selagents)
selagentname <- names(selagents)
###print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selagentpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
agentmatrix <- data.frame(selagentpred)
}
else{
agentmatrix <- cbind(agentmatrix,data.frame(selagentpred))
}
}
# Name the output matrix
colnames(agentmatrix) <- paste("agent",selagentname, sep = "_")
agentmatrix <- as.matrix(cbind(constant=1,agentmatrix))
return(agentmatrix)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
### Q3
gen_uagentmat <- function(uagentvec, y){
# Define regular expression pattern
pattern <- "([A-Za-z][A-Za-z0-9]{1,})"
uagentvec <- sapply(uagentvec, function(x) regmatches(x, gregexpr(pattern, x)))
uagentvec <- lapply(uagentvec, unique)
###print(head(uagentvec))
# Unlist the vector
agentvec <- unlist(uagentvec)
###print(head(agentvec))
# Sort the agent vector by order
soragent <- sort(table(agentvec), decreasing=TRUE)
###print(soragent)
# Select the agents that occur more than 10 times and less than or equal to floor(0.5N) times
filagent <- soragent[soragent >= 10]
filagent <- filagent[filagent <= floor(0.5 * length(uagentvec))]
###print(filagent)
# Return a column containing 1's if no tags occus less than 5 times
if(length(filagent) == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
### Computing t-value for each agent ###
# Create a named vector with the same length as the agent vector and set all values to NA
agentlen <- length(filagent)
agentname <- names(filagent)
allagents <- structure(rep(NA, agentlen), names=agentname)
# Compute and store the t-stats for each tag
for(iter in 1:agentlen){
# Get feature name
agentfeat <- agentname[iter]
# Store the numerical value of whether the feature exists in the tag vector
agentpred <- sapply(uagentvec, function(agentlist) as.numeric(is.element(agentfeat, unlist(agentlist))))
if(agentfeat == "cn"){
print(agentpred)
}
# Store the t-statistic for each tag in "alltags", NOTE "~" for binary predictor!
# Check names(summary(lm(tar~pred))) to find the corresponding entry
allagents[iter] <- summary(lm(y~agentpred))$coefficient[length(summary(lm(y~agentpred))$coefficient[, "t value"]), "t value"]
}
# Try sorting by reverse alphabetical order before filtering
order <- sort(names(allagents), decreasing = TRUE)
allagents <- allagents[order]
###print(allagents)
# Filter out the tags with absolute value of t-stat less than 1, and order the vector
selagents <- allagents[abs(allagents) >= 1]
selagents <- sort(abs(selagents), decreasing = TRUE)
selagentlen <- length(selagents)
###print(selagents)
# Return a column containing 1's if no agents have an absolute t value larger or equal to 1
if(selagentlen == 0){
return(as.matrix(rep(1,length(uagentvec))))
}
# Try reordering members with the same t-value
#for(iter in 1:(selagentlen-1)){
#  if(selagents[iter] == selagents[iter + 1]){
#    tmp <- names(selagents)[iter]
#    names(selagents)[iter] <- names(selagents)[iter + 1]
#    names(selagents)[iter + 1] <- tmp
#    iter <- iter-1
#  }
#}
###print(selagents)
selagentname <- names(selagents)
###print(selagentname)
# Create output matrix
for(seliter in 1:selagentlen){
# Get feature name
selagentfeat <- selagentname[seliter]
# Store the numerical value of whether the feature exists in the tag vector
selagentpred <- sapply(uagentvec, function(tag) as.numeric(is.element(selagentfeat, unlist(tag))))
# Combine the columns in to one dataframe
if(seliter == 1){
agentmatrix <- data.frame(selagentpred)
}
else{
agentmatrix <- cbind(agentmatrix,data.frame(selagentpred))
}
}
# Name the output matrix
colnames(agentmatrix) <- paste("agent",selagentname, sep = "_")
agentmatrix <- as.matrix(cbind(constant=1,agentmatrix))
return(agentmatrix)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
gen_uagentmat <- function(uagentvec, y){
# uagentvec contains column of user agents
# y contains column of paying_price
up_bound = length(uagentvec) * 0.5
utagstr <- uagentvec
pattern <- "([A-Za-z][A-Za-z0-9]{1, })"
user_tags <- regmatches(utagstr, gregexpr(pattern, utagstr))
user_tags <- lapply(user_tags, unique)
flat_user_tags <- unlist(user_tags, recursive = TRUE)
sort_user_tags <- sort(table(flat_user_tags), decreasing = TRUE)
sort_user_tags <- sort_user_tags[sort_user_tags >= 10]
sort_user_tags <- sort_user_tags[sort_user_tags <= up_bound]
if (length(sort_user_tags) == 0){
ret <- matrix(1, nrow = length(user_tags), ncol = 1)
colnames(ret) <- "constant"
return(ret)
}
#print(sort_user_tags)
nfeat = length(sort_user_tags)
t_value_per_tag = rep(NA, nfeat)
for (i in 1:nfeat){
feat <- names(sort_user_tags)[i]
x <- as.numeric(grepl(feat, user_tags))
result <- summary(lm(y ~ x))
t_value_per_tag[i] = coef(result)["x", "t value"]
if(feat == "cn"){
print(x)
}
}
names(t_value_per_tag) <- c(names(sort_user_tags))
#print(t_value_per_tag)
# t_value_per_tag <- t_value_per_tag[abs(t_value_per_tag) > 1]
t_value_per_tag <- t_value_per_tag[order(abs(t_value_per_tag), decreasing = TRUE)]
#print(t_value_per_tag)
ret <- matrix(NA, nrow = length(user_tags), ncol = length(t_value_per_tag) + 1)
colnames(ret) <- c("constant", paste("agent", names(t_value_per_tag), sep = "_"))
ret[,1] <- 1
for (i in 1:length(t_value_per_tag)){
feat <- names(t_value_per_tag)[i]
ret[,i+1] <- as.numeric(grepl(feat, user_tags))
}
return(ret)
}
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
umat1 = gen_uagentmat(rtb1_train$user_agent,y)
