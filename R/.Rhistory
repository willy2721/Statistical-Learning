prob[i] <- sum
}
prob
xmattest1[1:5,1:12]
prob
for(i in 1:nrow(xmattest1)){
for(j in 1:ncol(xmattest1)){
sum = sum + new_w[j] * xmattest1[i,j]
}
prob[i] <- sum
}
prob
for(i in 1:nrow(xmattest1)){
sum <- 0
for(j in 1:ncol(xmattest1)){
sum = sum + new_w[j] * xmattest1[i,j]
}
prob[i] <- sum
}
prob
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
y <- as.matrix(apply(xmattest1,1,t_to_y,w=new_w))
y
model1
model1$w
model1$
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
model1
model1$w
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
y <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
y
for(i in 1:nrow(xmattest1)){
if(y[i] > 0.5){
class[i] = 1
}
else
class[i] = 0
}
class
### Q2b
prob <- c()
class <- c()
xmattest1 <- model.matrix(~f_past+g1+g2+g3+g4+g5+g6+g7+g8+g9+g10,data=ds4a_train[,-1])
head(xmattest1)
model1
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
y <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
y
for(i in 1:nrow(xmattest1)){
if(y[i] > 0.5){
class[i] = 1
}
else
class[i] = 0
}
class
### Q2b
prob <- c()
class <- c()
xmattest1 <- model.matrix(~f_past+g1+g2+g3+g4+g5+g6+g7+g8+g9+g10,data=ds4a_train[,-1])
head(xmattest1)
model1
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
y <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
y
y
t_to_y <- function(row,w){
return(1 / (1 + exp(-(t(w) %*% row))))
}
logicreg_l2_predict() <- function(model1, xmattest1){
prob <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
}
logicreg_l2_predict() <- function(model1, xmattest1){
prob <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
class <- c()
for(i in 1:nrow(xmattest1)){
if(y[i] > 0.5){
class[i] = 1
}
else
class[i] = 0
}
ans <- list(prob = prob, class=class)
return(ans)
}
logicreg_l2_predict <- function(model1, xmattest1){
prob <- as.matrix(apply(xmattest1,1,t_to_y,w=model1$w))
class <- c()
for(i in 1:nrow(xmattest1)){
if(y[i] > 0.5){
class[i] = 1
}
else
class[i] = 0
}
ans <- list(prob = prob, class=class)
return(ans)
}
logicpred1 <- logicreg_l2_predict(model1, xmattest1)
head(logicpred1$class,n=25)
head(logicpred1$prob,n=25)
library(ISLR)
head(Smarket)
library(ISLR)
head(Smarket)
str(Smarket)
cor(Smarket[,-9])
library(ggplot2)
str(Smarket)
ggplot(Smarket, aes(x=Year, y=Volume)) + geom_point() + geom_smooth(method=lm) + labs(title="Relationship between year and volume", x="Year", y="Volume")
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs <- predict(glm.fit, type = "response")
glm.probs[1:10]
glm.pred=rep ("Down " ,1250)
glm.pred[glm .probs >.5]=" Up"
glm.pred[glm.probs >.5]=" Up"
glm.pred=rep ("Down" ,1250)
glm.pred[glm.probs >.5]="Up"
table(glm .pred ,Direction )
table(glm.pred ,Direction )
Hitters
Heart
library(ISLR)
Heart
Hitters
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw4/hw4ds1.rdata")
rm(list=ls())
load("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Class/data/hw4/hw4ds1.rdata")
hw4ds1[,1]
hw4ds1[,2]
str(hw4ds1)
str(hw4ds1[1])
hw4ds1[1]
hw4ds1[1:10]
hw4ds1[1:10,]
hw4ds1[1:10,1]
str(hw4ds1[1:10,1])
test <- hw4ds1[1:10,1]
str(test)
test <- hw4ds1[,1]
str(test)
test <- hw4ds1[,1]
str(test)
test <- hw4ds1[1:10,1]
str(test)
test <- hw4ds1[1:10,1,drop = TRUE]
str(test)
dstrain <- hw4ds1
dstrain[,1] = as.numeric(dstrain1[,1] == ypos)
m <- as.matrix(dstrain)
m <- as.matrix(dstrain)
dstrain[,1] = as.numeric(dstrain1[,1] == ypos)
dstrain[,1] = as.numeric(dstrain1[,1] == "pos")
dstrain[,1] = as.numeric(dstrain[,1] == "pos")
m <- as.matrix(dstrain)
m[,c(2:ncol(dstrain))] <- apply(m[,c(2:ncol(dstrain))], 2, function(x) ifelse(x > 0.0, 1, 0))
n = nrow(dstrain)
n = nrow(dstrain)
for(i in 2:ncol(dstrain)){
if(sum(as.numeric(m[,i])) <= min_count){
next
}
chi = chisq.test(m[,i], m[,1], correct = FALSE)
if(chi$statistic > chi_threshold){
chi_results[[names(dstrain)[i]]] = as.numeric(chi$statistic)
}
}
if(sum(as.numeric(m[,i])) <= 5){
next
}
for(i in 2:ncol(dstrain)){
if(sum(as.numeric(m[,i])) <= 5){
next
}
chi = chisq.test(m[,i], m[,1], correct = FALSE)
if(chi$statistic > chi_threshold){
chi_results[[names(dstrain)[i]]] = as.numeric(chi$statistic)
}
}
for(i in 2:ncol(dstrain)){
if(sum(as.numeric(m[,i])) <= 5){
next
}
chi = chisq.test(m[,i], m[,1], correct = FALSE)
if(chi$statistic > 0.00001){
chi_results[[names(dstrain)[i]]] = as.numeric(chi$statistic)
}
}
chi_results = list()
for(i in 2:ncol(dstrain)){
if(sum(as.numeric(m[,i])) <= 5){
next
}
chi = chisq.test(m[,i], m[,1], correct = FALSE)
if(chi$statistic > 0.00001){
chi_results[[names(dstrain)[i]]] = as.numeric(chi$statistic)
}
}
titan_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv")
str(titan_train)
head(titan_train)
library('ggplot2') # visualization
library('ggthemes') # visualization
install.packages("ggthemes")
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
install.packages(mice)
install.packages("mice")
library('mice') # imputation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages(randomForest)
install.packages("randomForest")
library('randomForest') # classification algorithm
titan_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv",stringAsFactors = F)
rm(list=ls())
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
titan_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv")
titan_test <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/test.csv")
str(titan_train)
titan_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv",stringsAsFactors=FALSE)
titan_test <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/test.csv",stringsAsFactors=FALSE)
str(titan_train)
titan_train$Name
titan_train$Title <- gsub((.*, )|(\..*), '',titan_train$Name)
titan_train$Title <- gsub('(.*, )|(\..*)', '',titan_train$Name)
titan_train$Title <- gsub('(.*, )|(\\..*)', '',titan_train$Name)
titan_train$Title <- gsub('(.*, )|(\\..*)','',titan_train$Name)
head(titan_train$Title)
table(titan_train$Title,titan_train$Sex)
titan_all <- bind_rows(titan_train,titan_test)
titan_all <- bind_rows(titan_train,titan_test)
titan_all$Title <- gsub('(.*, )|(\\..*)','',titan_train$Name)
titan_all$Title <- gsub('(.*, )|(\\..*)','',titan_all$Name)
table(titan_all$Title,titan_all$Sex)
titan_all$Title <- gsub('(.*, )|(\\..*)','',titan_all$Name)
table(titan_all$Title,titan_all$Sex)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
titan_all$Title[titan_all$Title == 'Mlle']        <- 'Miss'
titan_all$Title[titan_all$Title == 'Ms']          <- 'Miss'
titan_all$Title[titan_all$Title == 'Mme']         <- 'Mrs'
titan_all$Title[titan_all$Title %in% rare_title]  <- 'Rare Title'
table(titan_all$Title,titan_all$Sex)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
titan_all$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
titan_all$Surname <- sapply(titan_all$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
titan_all$Surname
head(titan_all)
titan_all$Surname
head(titan_all)
titan_all$Name[1]
titan_all$Name[1].split(',').first
titan_all$Name[1]
print(gsub('(\\,.*)','',titan_all$Name[1]))
titan_all$Name[1]
print(gsub('(\\,.*)','',titan_all$Name[2]))
titan_all$Name[2]
titan_all$Surname <- gsub('(\\,.*)','',titan_all$Name)
head(titan_all$Surname)
titan_all$Title[1]
titan_all$Name[1]
titan_all$Surname <- gsub('(\\,.*)','',titan_all$Name)
titan_all$Fsize <- titan_all$SibSp + titan_all$Parch + 1
head(Fsize)
head(titan_all$Fsize)
full$Family <- paste(full$Surname, full$Fsize, sep='_')
titan_all$Family <- paste(titan_all$Surname, titan_all$Fsize, sep='_')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat='count', position='dodge') + scale_x_continuous(breaks=c(1:11)) + labs(x = 'Family Size') + theme_few()
ggplot(titan_all[1:891,], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat='count', position='dodge') + scale_x_continuous(breaks=c(1:11)) + labs(x = 'Family Size') + theme_few()
titan_all$FsizeD[titan_all$Fsize == 1] <- 'single'
titan_all$FsizeD[titan_all$Fsize < 5 & titan_all$Fsize > 1] <- 'small'
titan_all$FsizeD[titan_all$Fsize > 4] <- 'large'
titan_all$Cabin
titan_all$Deck <- gsub(,'',titan_all$Cabin)
str(titan_all)
titan_all$Deck <- gsub((^.),'',titan_all$Cabin)
titan_all$Deck <- gsub('^.','',titan_all$Cabin)
head(titan_all$Deck)
gsub('^.','',titan_all$Cabin[1])
titan_all$Cabin[1]
titan_all$Cabin
gsub('^.','',titan_all$Cabin[2])
titan_all$Cabin[2]
gsub('^(\\d{3}).*$','',titan_all$Cabin[2])
gsub('^(\\d{1}).*$','',titan_all$Cabin[2])
gsub('^(\\d{1}).*$','',titan_all$Cabin[2])
titan_all$Deck <- gsub('^.','',titan_all$Cabin)
gsub('^(\\d{1}).*$','',titan_all$Cabin[2])
titan_all$Cabin[2]
titan_all$Deck<-factor(sapply(titan_all$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
titan_all$Deck
str(titan_all)
sum(is.na(titan_all$))
sum(is.na(titan_all$Embarked))
is.na(titan_all$Embarked)
titan_all[c(62, 830), 'Embarked']
titan_all[62,]
titan_train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv",stringsAsFactors=FALSE, na.strings = "")
titan_test <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/test.csv",stringsAsFactors=FALSE, na.strings = "")
titan_all <- bind_rows(titan_train,titan_test)
titan_all$Title <- gsub('(.*, )|(\\..*)','',titan_all$Name)
table(titan_all$Title,titan_all$Sex)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
titan_all$Title[titan_all$Title == 'Mlle']        <- 'Miss'
titan_all$Title[titan_all$Title == 'Ms']          <- 'Miss'
titan_all$Title[titan_all$Title == 'Mme']         <- 'Mrs'
titan_all$Title[titan_all$Title %in% rare_title]  <- 'Rare Title'
table(titan_all$Title,titan_all$Sex)
titan_all$Surname <- gsub('(\\,.*)','',titan_all$Name)
titan_all$Fsize <- titan_all$SibSp + titan_all$Parch + 1
titan_all$Family <- paste(titan_all$Surname, titan_all$Fsize, sep='_')
ggplot(titan_all[1:891,], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat='count', position='dodge') + scale_x_continuous(breaks=c(1:11)) + labs(x = 'Family Size') + theme_few()
titan_all$FsizeD[titan_all$Fsize < 5 & titan_all$Fsize > 1] <- 'small'
titan_all$FsizeD[titan_all$Fsize > 4] <- 'large'
titan_all$Deck<-factor(sapply(titan_all$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
str(titan_all)
is.na(titan_all$Embarked)
titan_all[c(62, 830), 'Embarked']
is.na(titan_all$Embarked)
titan_all[c(10), 'Embarked']
titan_all[c(10), 'Embarked']
titan_all[c(9), 'Embarked']
titan_all$Embarked
rm(list=ls())
# Load packages
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/train.csv",stringsAsFactors=FALSE, na.strings = "")
test <- read.csv("C:/Users/Willy/OneDrive/公用/台大/Senior courses/Second semester/Statistical Learning/R/Titanic/data/test.csv",stringsAsFactors=FALSE, na.strings = "")
full <- bind_rows(titan_train,titan_test)
full <- bind_rows(train,test)
# Grab title from passenger names
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))
# Create a family size variable including the passenger themselves
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
# Use ggplot2 to visualize the relationship between family size & survival
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# This variable appears to have a lot of missing values
full$Cabin[1:28]
# The first character is the deck. For example:
strsplit(full$Cabin[2], NULL)[[1]]
# Create a Deck variable. Get passenger deck A - F:
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
# Passengers 62 and 830 are missing Embarkment
full[c(62, 830), 'Embarked']
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
# Get rid of our missing passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# Use ggplot2 to visualize embarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# Since their fare was $80 for 1st class, they most likely embarked from 'C'
full$Embarked[c(62, 830)] <- 'C'
# Show row 1044
full[1044, ]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
# Replace missing fare value with median fare for class/embarkment
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
# Show number of missing Age values
sum(is.na(full$Age))
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')
# Save the complete output
mice_output <- complete(mice_mod)
# Plot age distributions
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
# Replace Age variable from the mice model.
full$Age <- mice_output$Age
# Show new number of missing Age values
sum(is.na(full$Age))
# First we'll look at the relationship between age & survival
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# I include Sex since we know (a priori) it's a significant predictor
facet_grid(.~Sex) +
theme_few()
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Adding Mother variable
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
# Show counts
table(full$Mother, full$Survived)
# Finish by factorizing our two new factor variables
full$Child  <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
# Split the data back into a train set and a test set
train <- full[1:891,]
test <- full[892:1309,]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
# Set a random seed
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
# Show model error
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
